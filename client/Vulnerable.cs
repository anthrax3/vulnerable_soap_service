
namespace client
{
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------



/// <remarks/>
[System.Web.Services.WebServiceBinding(Name="VulnerableServiceSoap", Namespace="http://tempuri.org/")]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
public partial class Vulnerable : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    private System.Threading.SendOrPostCallback AddUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback ListUsersOperationCompleted;
    
    private System.Threading.SendOrPostCallback GetUserOperationCompleted;
    
    private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
    
    public Vulnerable() {
        this.Url = "http://127.0.0.1:8080/Vulnerable.asmx";
    }
    
    public event AddUserCompletedEventHandler AddUserCompleted;
    
    public event ListUsersCompletedEventHandler ListUsersCompleted;
    
    public event GetUserCompletedEventHandler GetUserCompleted;
    
    public event DeleteUserCompletedEventHandler DeleteUserCompleted;
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string AddUser(string username, string password) {
        object[] results = this.Invoke("AddUser", new object[] {
                    username,
                    password});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginAddUser(string username, string password, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUser", new object[] {
                    username,
                    password}, callback, asyncState);
    }
    
    public string EndAddUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void AddUserAsync(string username, string password) {
        this.AddUserAsync(username, password, null);
    }
    
    public void AddUserAsync(string username, string password, object userState) {
        if ((this.AddUserOperationCompleted == null)) {
            this.AddUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
        }
        this.InvokeAsync("AddUser", new object[] {
                    username,
                    password}, this.AddUserOperationCompleted, userState);
    }
    
    private void OnAddUserCompleted(object arg) {
        if ((this.AddUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.AddUserCompleted(this, new AddUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string[] ListUsers() {
        object[] results = this.Invoke("ListUsers", new object[0]);
        return ((string[])(results[0]));
    }
    
    public System.IAsyncResult BeginListUsers(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("ListUsers", new object[0], callback, asyncState);
    }
    
    public string[] EndListUsers(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    public void ListUsersAsync() {
        this.ListUsersAsync(null);
    }
    
    public void ListUsersAsync(object userState) {
        if ((this.ListUsersOperationCompleted == null)) {
            this.ListUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListUsersCompleted);
        }
        this.InvokeAsync("ListUsers", new object[0], this.ListUsersOperationCompleted, userState);
    }
    
    private void OnListUsersCompleted(object arg) {
        if ((this.ListUsersCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.ListUsersCompleted(this, new ListUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public string GetUser(string username) {
        object[] results = this.Invoke("GetUser", new object[] {
                    username});
        return ((string)(results[0]));
    }
    
    public System.IAsyncResult BeginGetUser(string username, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUser", new object[] {
                    username}, callback, asyncState);
    }
    
    public string EndGetUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    public void GetUserAsync(string username) {
        this.GetUserAsync(username, null);
    }
    
    public void GetUserAsync(string username, object userState) {
        if ((this.GetUserOperationCompleted == null)) {
            this.GetUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
        }
        this.InvokeAsync("GetUser", new object[] {
                    username}, this.GetUserOperationCompleted, userState);
    }
    
    private void OnGetUserCompleted(object arg) {
        if ((this.GetUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.GetUserCompleted(this, new GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
    
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped, Use=System.Web.Services.Description.SoapBindingUse.Literal)]
    public bool DeleteUser(string username) {
        object[] results = this.Invoke("DeleteUser", new object[] {
                    username});
        return ((bool)(results[0]));
    }
    
    public System.IAsyncResult BeginDeleteUser(string username, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("DeleteUser", new object[] {
                    username}, callback, asyncState);
    }
    
    public bool EndDeleteUser(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    public void DeleteUserAsync(string username) {
        this.DeleteUserAsync(username, null);
    }
    
    public void DeleteUserAsync(string username, object userState) {
        if ((this.DeleteUserOperationCompleted == null)) {
            this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
        }
        this.InvokeAsync("DeleteUser", new object[] {
                    username}, this.DeleteUserOperationCompleted, userState);
    }
    
    private void OnDeleteUserCompleted(object arg) {
        if ((this.DeleteUserCompleted != null)) {
            System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
            this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
        }
    }
}

public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void AddUserCompletedEventHandler(object sender, AddUserCompletedEventArgs args);

public partial class ListUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal ListUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string[] Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string[])(this.results[0]));
        }
    }
}

public delegate void ListUsersCompletedEventHandler(object sender, ListUsersCompletedEventArgs args);

public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public string Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

public delegate void GetUserCompletedEventHandler(object sender, GetUserCompletedEventArgs args);

public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState) {
        this.results = results;
    }
    
    public bool Result {
        get {
            this.RaiseExceptionIfNecessary();
            return ((bool)(this.results[0]));
        }
    }
}

public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs args);
}